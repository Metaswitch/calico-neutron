commit 70359b702e774a25ed4e94203364d721904a191b
Author: James Page <james.page@ubuntu.com>
Date:   Fri Dec 18 15:02:11 2015 +0000

    Ensure that tunnels are fully reset on ovs restart
    
    When the l2population mechanism driver is enabled, if ovs is restarted
    tunnel ports are not re-configured in full due to stale ofport handles
    in the OVS agent.
    
    Reset all handles when OVS is restarted to ensure that tunnels are
    fully recreated in this situation.
    
    Change-Id: If0e034a034a7f000a1c58aa8a43d2c857dee6582
    Closes-bug: #1460164
    (cherry picked from commit 17c14977ce0e2291e911739f8c85838f1c1f3473)
    (cherry picked from commit 4173d99131208d835880b34dcbd50f92d27295d1)

diff --git a/neutron/plugins/openvswitch/agent/ovs_neutron_agent.py b/neutron/plugins/openvswitch/agent/ovs_neutron_agent.py
index 9d3bf1d..25639c1 100644
--- a/neutron/plugins/openvswitch/agent/ovs_neutron_agent.py
+++ b/neutron/plugins/openvswitch/agent/ovs_neutron_agent.py
@@ -207,8 +207,8 @@ class OVSNeutronAgent(sg_rpc.SecurityGroupAgentRpcCallbackMixin,
         self.bridge_mappings = bridge_mappings
         self.setup_physical_bridges(self.bridge_mappings)
         self.local_vlan_map = {}
-        self.tun_br_ofports = {p_const.TYPE_GRE: {},
-                               p_const.TYPE_VXLAN: {}}
+
+        self._reset_tunnel_ofports()
 
         self.polling_interval = polling_interval
         self.minimize_polling = minimize_polling
@@ -255,6 +255,10 @@ class OVSNeutronAgent(sg_rpc.SecurityGroupAgentRpcCallbackMixin,
         except Exception:
             LOG.exception(_("Failed reporting state!"))
 
+    def _reset_tunnel_ofports(self):
+        self.tun_br_ofports = {p_const.TYPE_GRE: {},
+                               p_const.TYPE_VXLAN: {}}
+
     def setup_rpc(self):
         mac = self.int_br.get_local_port_mac()
         self.agent_id = '%s%s' % ('ovs', (mac.replace(":", "")))
@@ -1296,6 +1300,7 @@ class OVSNeutronAgent(sg_rpc.SecurityGroupAgentRpcCallbackMixin,
                 self.setup_integration_br()
                 self.setup_physical_bridges(self.bridge_mappings)
                 if self.enable_tunneling:
+                    self._reset_tunnel_ofports()
                     self.setup_tunnel_br()
                     tunnel_sync = True
             # Notify the plugin of tunnel IP
diff --git a/neutron/tests/unit/openvswitch/test_ovs_neutron_agent.py b/neutron/tests/unit/openvswitch/test_ovs_neutron_agent.py
index 6a66d78..54160c8 100644
--- a/neutron/tests/unit/openvswitch/test_ovs_neutron_agent.py
+++ b/neutron/tests/unit/openvswitch/test_ovs_neutron_agent.py
@@ -834,6 +834,12 @@ class TestOvsNeutronAgent(base.BaseTestCase):
         expected_calls = [mock.call('gre-0a0a0a0a', '10.10.10.10', 'gre')]
         self.agent.setup_tunnel_port.assert_has_calls(expected_calls)
 
+    def test_reset_tunnel_ofports(self):
+        tunnel_handles = self.agent.tun_br_ofports
+        self.agent.tun_br_ofports = {'gre': {'10.10.10.10': '1'}}
+        self.agent._reset_tunnel_ofports()
+        self.assertEqual(self.agent.tun_br_ofports, tunnel_handles)
+
     def test_ovs_restart(self):
         reply2 = {'current': set(['tap0']),
                   'added': set(['tap2']),
@@ -843,6 +849,8 @@ class TestOvsNeutronAgent(base.BaseTestCase):
                   'added': set([]),
                   'removed': set(['tap0'])}
 
+        self.agent.enable_tunneling = True
+
         with contextlib.nested(
             mock.patch.object(async_process.AsyncProcess, "_spawn"),
             mock.patch.object(log.ContextAdapter, 'exception'),
@@ -855,9 +863,14 @@ class TestOvsNeutronAgent(base.BaseTestCase):
             mock.patch.object(ovs_neutron_agent.OVSNeutronAgent,
                               'setup_integration_br'),
             mock.patch.object(ovs_neutron_agent.OVSNeutronAgent,
-                              'setup_physical_bridges')
+                              'setup_physical_bridges'),
+            mock.patch.object(ovs_neutron_agent.OVSNeutronAgent,
+                              'setup_tunnel_br'),
+            mock.patch.object(ovs_neutron_agent.OVSNeutronAgent,
+                             '_reset_tunnel_ofports')
         ) as (spawn_fn, log_exception, scan_ports, process_network_ports,
-              check_ovs_restart, setup_int_br, setup_phys_br):
+              check_ovs_restart, setup_int_br, setup_phys_br,
+              setup_tunnel_br, reset_tunnel_ofports):
             log_exception.side_effect = Exception(
                 'Fake exception to get out of the loop')
             scan_ports.side_effect = [reply2, reply3]
@@ -888,6 +901,10 @@ class TestOvsNeutronAgent(base.BaseTestCase):
         # OVS restart and re-setup the bridges
         setup_int_br.assert_has_calls([mock.call()])
         setup_phys_br.assert_has_calls([mock.call({})])
+        # Ensure that tunnel handles are reset and bridge
+        # and flows reconfigured.
+        self.assertTrue(reset_tunnel_ofports.called)
+        self.assertTrue(setup_tunnel_br.called)
 
 
 class AncillaryBridgesTest(base.BaseTestCase):
